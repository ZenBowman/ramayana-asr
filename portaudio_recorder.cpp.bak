#include "portaudio.h"
#include <iostream>
#include <vector>
#include <pocketsphinx.h>
#include <string>
#include <zmq.hpp>

const std::string base_dir =
    "/home/psamtani/development/pocketsphinx-0.8/model";
const std::string hmm = base_dir + "/hmm/en_US/hub4wsj_sc_8k";
const std::string lm = base_dir + "/lm/en/ramayana.DMP";
  const std::string dict = base_dir + "/lm/en/ramayana.dic";

constexpr unsigned int bufferSize = 512;
constexpr unsigned int sampleRate = 16000;
constexpr unsigned int numChannels = 1;

short samples[bufferSize];

std::vector<short> history;

long numcalls;
bool recorded = false;

static int recordCallback(const void *inputBuffer, void *outputBuffer,
                          unsigned long framesPerBuffer,
                          const PaStreamCallbackTimeInfo *timeInfo,
                          PaStreamCallbackFlags statusFlags, void *userData) {

  numcalls++;
  ps_decoder_t *ps = (ps_decoder_t *)userData;
  short max = 0;
  short thisval;

  short *data = (short *)inputBuffer;
  for (unsigned int i = 0; i < bufferSize; i++) {
    thisval = data[i];
    if (thisval > max) {
      max = thisval;
    }
  }

  history.push_back(max);
  if ((history.size() % 50) == 0) {
    char const *uttid;
    int32 score;
    int rv = ps_end_utt(ps);
    const char *hyp1 = ps_get_hyp(ps, &score, &uttid);
    std::cout << "Recognized: " << uttid << " = " << hyp1 << "(" << numcalls
              << ")" << std::endl;
    return paContinue;
  }

  if ((history.size() % 50) == 1) {
    ps_start_utt(ps, "foo");
  }

  if (history.size() > 1000) {
    return paComplete;
  }

  ps_process_raw(ps, data, 512, FALSE, FALSE);

  std::cout << max << " ";
  return paContinue;
}

ps_decoder_t *initializePocketsphinx() {
  cmd_ln_t *config =
      cmd_ln_init(NULL, ps_args(), TRUE, "-hmm", hmm.c_str(), "-lm", lm.c_str(),
                  "-dict", dict.c_str(), NULL);
  if (config == NULL) {
    return nullptr;
  }

  ps_decoder_t *ps = ps_init(config);
  return ps;
}

void finalizePocketsphinx(ps_decoder_t *ps) { ps_free(ps); }

PaStream *initializeRecordingStream(void *userData) {
  PaError err = Pa_Initialize();
  if (err != paNoError) {
    std::cout << "Unable to initialize portaudio";
    Pa_Terminate();
    return nullptr;
  }

  PaStreamParameters inputParameters;
  inputParameters.device = Pa_GetDefaultInputDevice();
  if (inputParameters.device == paNoDevice) {
    std::cout << "Unable to capture input device";
    Pa_Terminate();
    return nullptr;
  }

  inputParameters.channelCount = 1;
  inputParameters.sampleFormat = paInt16;
  inputParameters.suggestedLatency =
      Pa_GetDeviceInfo(inputParameters.device)->defaultLowInputLatency;
  inputParameters.hostApiSpecificStreamInfo = nullptr;

  PaStream *stream;
  err = Pa_OpenStream(&stream, &inputParameters, nullptr, sampleRate,
                      bufferSize, paClipOff, recordCallback, userData);

  if (err != paNoError) {
    std::cout << "Unable to open stream";
    Pa_Terminate();
    return nullptr;
  }

  err = Pa_StartStream(stream);
  if (err != paNoError) {
    std::cout << "Unable to start stream";
    Pa_Terminate();
    return nullptr;
  }

  return stream;
}

void finalizeRecordingStream(PaStream *stream) {
  Pa_CloseStream(stream);
  Pa_Terminate();
}

int main(int argc, char *argv[]) {
  char const *hyp, *uttid;
  int32 score;
  PaError err;

  ps_decoder_t *ps = initializePocketsphinx();
  if (ps == nullptr){
    return 1;}

  PaStream *stream = initializeRecordingStream(ps); 
  if (stream == nullptr) {
    return 1;
  }

  std::cout << "Recording started";
  std::cout.flush();

  while ((err = Pa_IsStreamActive(stream)) == 1) {
    Pa_Sleep(1000);
  }
  
  finalizeRecordingStream(stream);
  finalizePocketsphinx(ps);

  return 0;
}
